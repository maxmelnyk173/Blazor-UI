@page "/addtransaction"
@using FinanceManager.web.Data
@using FinanceManager.web.Services
@using FinanceManager.web.Shared.Custom
@inject ITransactionService TransactionService
@inject ICategoryService CategoryService
@inject NavigationManager UriHelper

<EditForm Model="@Transaction" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <h3>Add Transaction</h3>
    <hr />

    <div class="form-group row">
        <label for="name" class="col-sm-2 col-form-label">
            Name
        </label>
        <div class="col-sm-10">
            <InputText id="name" class="form-control" placeholder="Name"
                       @bind-Value="Transaction.Name" />
            <ValidationMessage For="@(() => Transaction.Name)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="type" class="col-sm-2 col-form-label">
            Type
        </label>
        <div class="col-sm-10">
            <InputSelect @bind-Value="Transaction.TransactionType" class="form-control" required>
                <option value="">Select Type</option>
                @foreach (var type in Enum.GetValues(typeof(TransactionType)))
                {
                    <option value="@type.ToString()">@type</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Transaction.TransactionType)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="category" class="col-sm-2 col-form-label">
            Category
        </label>
        <div class="col-sm-10">
            <CustomInputSelect @bind-Value="Transaction.CategoryId" class="form-control" required>
                <option value="">Select Category</option>
                @foreach (var item in Categories)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </CustomInputSelect>
            <ValidationMessage For="@(() => Transaction.CategoryId)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="amount" class="col-sm-2 col-form-label">
            Amount
        </label>
        <div class="col-sm-10">
            <InputNumber id="amount" class="form-control" placeholder="Amount"
                         @bind-Value="Transaction.Amount" />
            <ValidationMessage For="@(() => Transaction.Amount)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="date" class="col-sm-2 col-form-label">
            Date
        </label>
        <div class="col-sm-10">
            <InputDate @bind-Value="Transaction.ExpenseDate" class="form-control" />
        </div>
    </div>
    <div class="form-group row">
        <label for="description" class="col-sm-2 col-form-label">
            Description
        </label>
        <div class="col-sm-10">
            <InputText id="description" class="form-control" placeholder="Description"
                       @bind-Value="Transaction.Description" />
            <ValidationMessage For="@(() => Transaction.Description)" />
        </div>
    </div>
    <div>
        <button class="btn btn-primary" type="submit">Submit</button> <button class="btn btn-primary" @onclick="() => GetBack()">Back</button>
    </div>
</EditForm>

@code {
    private Transaction Transaction { get; set; } = new Transaction();

    public List<Category> Categories { get; set; } = new List<Category>();

    [Parameter]
    public string Id { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Categories = (await CategoryService.GetAllAsync()).ToList();
    }

    protected async Task HandleValidSubmit()
    {
        var result = await TransactionService.SaveAsync(Transaction);

        NavigationManager.NavigateTo("/transactions");
    }

    private void GetBack()
    {
        UriHelper.NavigateTo("/transactions/");
    }
}
